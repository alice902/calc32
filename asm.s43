#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
                                              
        RSEG    DATA16_C                ; Constant R/only data segment (Flash).       

LCD_table                               ; LCD codes table
        DB 0xB7                         ; 0
        DB 0x12                         ; 1
        DB 0x8F                         ; 2
        DB 0x1F                         ; 3
        DB 0x3A                         ; 4
        DB 0x3D                         ; 5
        DB 0xBD                         ; 6
        DB 0x13                         ; 7
        DB 0xBF                         ; 8
        DB 0x3F                         ; 9
        
;--- WPROWADZENIE ARGUMENTOW ----;        
arg1    DL -90000                       ; Generates 32bit constant
arg2    DL 50                           ; Args for operations

minus   DW 0x8000                       ; 1000 0000 0000 0000 negative number in U2
err     equ 0xAD                        ; LCD code for E

        RSEG DATA16_Z                   ; Initialized to 0 data segment (RAM).
   
result  DS32 1                          ; Allocates space for 32bit variable.
BCD_res DS32 1                          ; result, result in BCD and LCD buffer
LCD_buf DS8 7

        RSEG CODE                       ; place program in 'CODE' segment
        
init    MOV     #SFE(CSTACK), SP        ; set up stack

main    NOP                             ; main program
        MOV.W #WDTPW+WDTHOLD,&WDTCTL    ; Stop watchdog timer
        MOV.B #0xFD, &LCDACTL           ; Sets up LCDA register, MUX4 mode

        CLR R5                          ; Clearing registers
        CLR R6                          ; LCD buffer
        CLR R7                          ; LSW arg1
        CLR R8                          ; MSW arg1
        CLR R9                          ; LSW arg2
        CLR R10                         ; MSW arg2
        CLR R11                         ; Auxilary registers
        CLR R12                         ;
        CLR R13                         ; 
        
        MOV.W arg1+2, R8                ; Writing arguments to registers
        MOV.W arg1, R7                  ; MSB arg1 to R8, LSB arg1 to R7
        MOV.W arg2+2, R10               ; MSB arg2 to R10
        MOV.W arg2, R9                  ; LSB arg2 to R9
        
;--- WYBOR OPERACJI ---;        
        ;CALL #addition
        ;CALL #substraction
        CALL #multiplication
        
addition                                ; 
        ADD.W R9, R7                    ; LSB + LSB
        ADDC.W R10, R8                  ; MSB + MSB including Carry
        JN set_minus_flag               ; Go to set_minus_flag if N=1
        JMP save_result                 ; Else if go to save_result
        
substraction                            ; 
        SUB.W R9, R7                    ; LSB - LSB
        SUBC.W R10, R8                  ; MSB - MSB including Carry
        JN set_minus_flag               ; Go to  do set_minus_flag if N=1
        JMP save_result                 ; Else if go to save_result
        
multiplication
        BIT minus, R8                   ; Check if arg1 < 0
        JN to_pos1                      ; Test oldest bit (sign in u2)
        JMP next                        ; If arg1 positive check arg2
to_pos1 INV R8                          ; If negative convert to positive
        INV R7                          ; (invert bits and add 1)
        INC R7
        MOV #1, R11                     ; Checking arg2
next    BIT minus, R10                   
        JN to_pos2
        JMP mltpl                       ; If arg2 positive go to mltpl
to_pos2 INV R10				; Else if convert to negative
        INV R9
        INC R9
        MOV #1, R12
mltpl   MOV R9, R4                      ; Write arg2 to R9
        MOV #1, R5                      ; Write 1 to R5 (loop counter)
        CLR R10				; Clear R10 i R8
        ;CLR R8
        MOV.W R7, R9                    ; Wrte arg1 to R9
        MOV.W R8, R10
loop    INC R5                          ; Increment R5
        ADD.W R9, R7                    ; LSW + LSW
        ADDC.W R10, R8                  ; MSW + MSW with Carry
        CMP R5,R4                       ; Compare R5 i R4. If R4 = R5 to Z=1
        JNZ loop                        ; If Z=0 go to loop
        CLRZ				; Else if clear Z
        CMP R12, R11                    ; If result positive
        JEQ save_result                 ; Go to save result if R12=R11
        MOV.B #0x10,LCDM8               ; Else if set negative flag                      
        MOV.W R7, result                ; Write R7 i R8 register content
        MOV.W R8, result+2              ; to BCD_result
        JMP BCD_conversion		; Go to BCD_conversion
        
set_minus_flag
        MOV.B #0x10,LCDM8 		; Set negative result flag
        
save_result
        MOV.W R7, result                ; Enter result to result
        MOV.W R8, result+2		; (memory address)
        BIT minus, result+2             ; Check if result < 0
        JN is_negative                  ; If result < 0 (N=1) go to    
	JMP BCD_conversion		; is_negative, else if go to BCD_conv
is_negative 
        INV result+2                    ; Convert to positiv number in U2 
        INV result                      ; (invert bits and add 1)
        INC result
        DADC result+2                   ; Add Carry

BCD_conversion
        MOV #32, R5                     ; Enter 32 to R5 register (counter)
        CLR R8				; Clear registers
        CLR R9
shift   RLA result                      ; Rotate left
        RLC result+2                    ; Rotate left with Carry
        DADD R9, R9                     ; src, dst + C to dst (decimally) LSW
        DADD R8, R8			; MSW
        DEC R5                          ; Decrementation R15
        JNZ shift                       ; Go to shift if Z=0
        MOV.W R9, BCD_res		; Enter R9 to BCD_res (LSW)
        MOV.W R8, BCD_res+2		; and R10 to BCD_res+2 (MSW)
	
range   
        CMP #9999, BCD_res+2
        JC over
        JMP write_buffer
over    MOV.B #0xAD, LCDM1		; Set range overflow
        JMP end_programme 		; Go to end_programme

write_buffer
        MOV #0x000F, R7                 ; Set mask
        CLR R10                         ; Loop counter for mask                  
        MOV #LCD_buf,R6                 ; Enter LCD_buff address to R6
loop_a  CLR R11
        CMP #4, R10			; Compare R10 and 4
        JEQ display			; If equal go to display
        MOV BCD_res, R5                 ; Save LSW BCD_res to R5
        MOV BCD_res+2, R8		; Save MSW BCD_res to R8
        AND R7, R5			; AND LSW BCD_res mask
        AND R7, R8			; and MSW 
	CMP #0, R10			; Check if R10=0
	JNE loop_b			; If not go to loop_b
	MOV.B R5,0(R6)			; Else if save content to R5 register
        MOV.B R8,4(R6)			; to cell address 0+R6 (LSW LCD_buf)
	INC R6				; and R8 to 4+R6 (MSW LCD_buf)
	INC R10				; Incrementation R6 and R10
	RLAM.A #4,R7			; Shift R7 content left 4x
	JMP loop_a			; Go to loop_a
loop_b  RRAM.A #4, R5			; Shift R5 content right 4x
        RRAM.A #4, R8			; and R8
        INC R11				; IncrementationR11
	CMP R11, R10			; Compare R11 i R10
	JNE loop_b			; If not equal go to loop_b
	MOV.B R5,0(R6)			; Save next number to LCD buffer
        MOV.B R8,4(R6)			; in BCD to LSB LCD_buf and LCD_buf+2
	INC R6				; Incrementation R6 and R10
	INC R10
	RLAM.A #4,R7			; Shift mask by 0xF left
	JMP loop_a                	; Go to loop_a
               
display
        MOV     #LCD_buf,R4             ; Save LCD_buf address to R4
        CLR     R5			; Clear R5
        MOV     #7,R6                   ; Enter 7 to R6 (loop counter)
r_buf   MOV.B   @R4+,R7               	; Read buffer
        MOV.B   LCD_table(R7),LCDMEM(R5); Send LCD code
        INC     R5                      ; Incrementation R5
        DEC     R6                      ; Decrementation R6 (counter)
        JNZ     r_buf			; If R6!=0 go to r_buf

end_programme
        NOP
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
END
