#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
                                              
        RSEG    DATA16_C                ; Constant R/only data segment (Flash).       

LCD_table                               ; Tablica kodów LCD
        DB 0xB7                         ; 0
        DB 0x12                         ; 1
        DB 0x8F                         ; 2
        DB 0x1F                         ; 3
        DB 0x3A                         ; 4
        DB 0x3D                         ; 5
        DB 0xBD                         ; 6
        DB 0x13                         ; 7
        DB 0xBF                         ; 8
        DB 0x3F                         ; 9
        
;--- TYPE ARGUMENTS HERE ----;        
arg1    DL 5                            ; Generates 32bit constant.
arg2    DL -2                           ; Argumenty do wykonania dzialania

minus   DW 0x8000                       ; 1000 0000 0000 0000 w U2 liczba ujemna
err     equ 0xAD                        ; kod LCD dla liczby E

        RSEG DATA16_Z                   ; Initialized to 0 data segment (RAM).   
result  DS32 1                          ; Allocates space for 32bit variable.
BCD_res DS32 1                          ; wynik, wynik w BCD i bufor LCD
LCD_buf DS8 7

        RSEG CODE                       ; place program in 'CODE' segment
        
init    MOV     #SFE(CSTACK), SP        ; set up stack

main    NOP                             ; main program
        MOV.W #WDTPW+WDTHOLD,&WDTCTL    ; Stop watchdog timer
        MOV.B #0xFD, &LCDACTL           ; Sets up LCDA register, MUX4 mode

        CLR R5                          ; Wyczyszczenie rejestrów
        CLR R6                          ; Adres bufora LCD
        CLR R7                          ; LSB arg1
        CLR R8                          ; MSB arg1
        CLR R9                          ; LSB arg2
        CLR R10                         ; MSB arg2
        CLR R11                         ; Rejestry pomocnicze
        CLR R12                         ;
        CLR R13                         ; 
        
        MOV.W arg1+2, R8                ; Zapisanie argumentów do rejestrów
        MOV.W arg1, R7                  ; MSB arg1 do R8, LSB arg1 do R7
        MOV.W arg2+2, R10               ; MSB arg2 do R10
        MOV.W arg2, R9                  ; LSB arg2 do R9
        
;--- WYBÓR OPERACJI ---;        
        ;CALL #addition
        ;CALL #substraction
        CALL #multiplication
        
addition                                ; dodawanie
        ADD.W R9, R7                    ; LSB + LSB
        ADDC.W R10, R8                  ; MSB + MSB z uzwglednieniem Carry
        JN set_minus_flag               ; Skocz do etykiety set_minus_flag jesli N=1
        JMP save_result                 ; Jak nie to skocz do save_result
        
substraction                            ; odejmowanie
        SUB.W R9, R7                    ; LSB - LSB
        SUBC.W R10, R8                  ; MSB - MSB z uwzglednieniem Carry
        JN set_minus_flag               ; Skocz do etykiety set_minus_flag jesli N=1
        JMP save_result                 ; Jak nie to skocz do save_result
        
multiplication
        BIT minus, R8                   ; Sprawdzenie czy arg1 < 0
        JN to_pos1                      ; Testowanie najstarszego bitu (znak w u2)
        JMP next                        ; Jesli arg1 dodatni sprawdz arg2
to_pos1 INV R8                          ; Jesli ujemny zamien na dodatni
        INV R7                          ; (odwroc bity i dodaj 1)
        INC R7
        MOV #1, R11                     ; Analogiczne sprawdzenie arg2
next    BIT minus, R10                   
        JN to_pos2
        JMP mltpl                       ; Jesli 
to_pos2 INV R10
        INV R9
        INC R9
        MOV #1, R12
mltpl   CMP #999, R8                   ; checking if args are 16bit
        JGE over                        ; jump to label if no carry
        CMP #999, R10
        JGE over
        MOV R9, R4                      ; Loop counter LSB arg2 = R9
        MOV #1, R5                      ; and the i variable
        CLR R10
        CLR R8
        MOV.W R7, R9                    ; Mov lsb arg1 to R9
loop    INC R5                          ; i++
        ADD.W R9, R7                    ; LSB + LSB
        ADDC.W R10, R8                  ; MSB + MSB with Carry
        CMP R5,R4                       ; porownanie r5 i r4. jesli r4 = r5 to bit z=1
        JNZ loop                        ; if z=0 jump do loop
        CLRZ
        CMP R12, R11                    ; minus times minus is plus if R12 and R13 =1 z=1
        JEQ save_result                 ; jump to label if Z=1
        MOV.B #0xFF,LCDM8               ; otherwise set minus and jump                        
        MOV.W R7, result                ; Moving into result
        MOV.W R8, result+2              ; Save result lol xDDD
        JMP BCD_conversion
        
set_minus_flag
        MOV.B #0x04,LCDM8 ;JAK ZAPALIC MINUSA? ZAPALIMY PLUSA XD
        JMP save_result
        
save_result
        MOV.W R7, result                ; Moving into result
        MOV.W R8, result+2
        BIT minus, result+2             ; Checking if result is < 0
        JN is_negative                  ; if result < 0 N=1
is_negative 
        INV result+2                    ; Conversion to positive number in U2 
        INV result                      
        INC result
        DADC result+2                   ; adding Carry
        JMP BCD_conversion

BCD_conversion
        MOV #32, R5                     ; 32 digits
        CLR R8
        CLR R9
shift   RLA result                       ; Rotate left
        RLC result+2                     ; Rotate left with Carry
        DADD R9, R9                      ; src, dst + C to dst (decimally)
        DADD R8, R8
        DEC R5                          ; R15--
        JNZ shift                        ; Jump label shift if Z=0
        MOV.W R9, BCD_res
        MOV.W R8, BCD_res+2
        ; Based on MSP 430 Mixed Signal Microcontroller Application Reports
        ; (page 559)
        
range   
        CMP #1000, BCD_res+2
        JC over
        JMP write_buffer
over    MOV.B #0xAD, LCDM1
        JMP end_programme 

write_buffer
        MOV #0x000F, R7                 ; Setting up mask
        CLR R10                         ; Loop counter for mask
        CLR R4                          ; 0                        
        MOV #LCD_buf,R6                 ; Write LCD_buff address to R6
loop_a  CLR R11
        CMP #4, R10
        JEQ display  
        MOV BCD_res, R5                 ; Write LSB BCD_res to R5
        MOV BCD_res+2, R8
        AND R7, R5
        AND R7, R8
	CMP #0, R10
	JNE loop_b
	MOV.B R5,0(R6)
        MOV.B R8,4(R6)
	INC R6
	INC R10
	RLAM.A #4,R7
	JMP loop_a
loop_b  RRAM.A #4, R5
        RRAM.A #4, R8
        INC R11
	CMP R11, R10
	JNE loop_b
	MOV.B R5,0(R6)
        MOV.B R8,4(R6)
	INC R6
	INC R10
	RLAM.A #4,R7
	JMP loop_a                
               
display
        MOV     #LCD_buf,R4             ; Write LCD_buf addres into R4
        CLR     R5
        MOV     #7,R6                   ; Loop counter
r_buf   MOV.B   @R4+,R7               	; Buffer read
        MOV.B   LCD_table(R7),LCDMEM(R5); Send code to LCD
        INC     R5                      ; Increment LCD display address
        DEC     R6                      ; i-- (loop)
        JNZ     r_buf
        ; Based on LCD.a43 (prof Janusz Janiczek, kmeif.pwr.edu.pl)

end_programme
        NOP
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
END
